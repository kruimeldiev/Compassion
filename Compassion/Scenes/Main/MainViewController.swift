//
//  MainViewController.swift
//  Compassion
//
//  Created by Casper Daris on 09/04/2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
//  This template is meant to work with Swinject.

import UIKit

protocol MainViewControllerProtocol: class, UIViewControllerRouting {
    typealias ViewModel = MainModels.LoadTabBarItems.ViewModel
    
    func set(interactor: MainInteractorProtocol)
    func set(router: MainRouterProtocol)

    func displayMain(viewModel: ViewModel)
}

/// This VC basically handles the Tab Bar
class MainViewController: UITabBarController, MainViewControllerProtocol {

    // MARK: - Properties
    var interactor: MainInteractorProtocol?
    var router: MainRouterProtocol?

    var tabBarItems = [TabBarItemViewModel]()
    
    // MARK: - DI
    func set(interactor: MainInteractorProtocol) {
        self.interactor = interactor
    }

    func set(router: MainRouterProtocol) {
        self.router = router
    }
    

    // MARK: - Outlets

    // MARK: - Properties

    // MARK: - Lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        interactor?.handleMainDidLoad(request: .init())
    }

    // MARK: - Actions

}

// MARK: - Tabbar Methods
extension MainViewController {

    func displayMain(viewModel: ViewModel) {
        setupTabBar(items: viewModel.tabBarItems)
    }
    
    func setupTabBar(items: [TabBarItemViewModel]) {
        /// The .map function handles every entry of the array one by one in the closure
        self.viewControllers = items.map {
            guard let vc = $0.viewController else {
                print("Unable to instantiate ViewController")
                return UIViewController()
            }
            let tabBarItem = UITabBarItem(title: $0.title, image: $0.icon, tag: $0.tag)
            vc.tabBarItem = tabBarItem
            return vc
        }
    }
}
