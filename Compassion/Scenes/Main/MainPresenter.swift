//
//  MainPresenter.swift
//  Compassion
//
//  Created by Casper Daris on 09/04/2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
//  This template is meant to work with Swinject.

import UIKit

protocol MainPresenterProtocol {
    typealias Response = MainModels.LoadTabBarItems.Response
    
    func set(viewController: MainViewControllerProtocol?)

    func presentMain(response: Response)
}

class MainPresenter: MainPresenterProtocol {

    // MARK: - Properties
    private let viewModelProvider: TabBarViewModelProviderProtocol?
    weak var viewController: MainViewControllerProtocol?

    // MARK: - DI
    init(viewModelProvider: TabBarViewModelProviderProtocol) {
        self.viewModelProvider = viewModelProvider
    }
    
    func set(viewController: MainViewControllerProtocol?) {
        self.viewController = viewController
    }
}

// MARK: Methods
extension  MainPresenter {

    func presentMain(response: Response) {
        /// Just like the .map function, the .compactMap function handles every entry of the array one by one in the closure
        /// The difference is that the compactMap will ignore all nil values in the array
        let tabBarItems = response.tabBarItems.compactMap {[weak self] in
            self?.viewModelProvider?.viewModel(for: $0)
        }
        viewController?.displayMain(viewModel: .init(tabBarItems: tabBarItems))
    }
}
