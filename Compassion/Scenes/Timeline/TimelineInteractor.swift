//
//  TimelineInteractor.swift
//  Compassion
//
//  Created by Casper Daris on 09/04/2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
//  This template is meant to work with Swinject.

import UIKit

protocol TimelineInteractorProtocol {
    func handleTimelineDidLoad()
    func handleCharityTapped(name: String)
}

class TimelineInteractor: TimelineInteractorProtocol {
    
    // MARK: - DI
    private var presenter: TimelinePresenterProtocol
    private let profileManager: ProfileManagerProtocol
    private let charityService: CharityServiceProtocol
    
    private var favoriteResult = [CharityModel]()
    
    init(presenter: TimelinePresenterProtocol,
         profileManager: ProfileManagerProtocol,
         charityService: CharityServiceProtocol) {
        self.presenter = presenter
        self.charityService = charityService
        self.profileManager = profileManager
    }
    
    func handleTimelineDidLoad() {
        fetchFavoriteCharities {
            self.presenter.presentTimeline(response: .init(favorites: self.favoriteResult))
        }
    }
    
    func fetchFavoriteCharities(completion: @escaping() -> ()) {
        let gebruiker = profileManager.fetchProfile()
        charityService.fetchFavorites(user: gebruiker.email) { result in
            self.favoriteResult = result
            completion()
        }
    }
    
    func handleCharityTapped(name: String) {
        charityService.fetchSingleCharity(charityName: name) { result in
            self.presenter.presentCharityDetail(charity: result)
        }
    }
}
