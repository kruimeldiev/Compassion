////
//  TimelineRouter.swift
//  Compassion
//
//  Created by Casper Daris on 09/04/2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
//  This template is meant to work with Swinject.

import UIKit

protocol TimelineRouterProtocol {
  func set(viewController: TimelineViewControllerProtocol?)
  func route(to scene: TimelineRouter.Scene)
}

class TimelineRouter: NSObject, TimelineRouterProtocol {

    //MARK: - DI
    weak var viewController: TimelineViewControllerProtocol?
    private let rootNavigator: RootNavigatorProtocol
    private let searchStoryboard: Storyboard

    func set(viewController: TimelineViewControllerProtocol?) {
        self.viewController = viewController
    }

    init(rootNavigator: RootNavigatorProtocol,
         search: Storyboard) {
        self.rootNavigator = rootNavigator
        self.searchStoryboard = search
    }
}

// MARK: - Routing logic
extension TimelineRouter {

    enum Scene {
        case detail(charity: CharityModel)
    }

    func route(to scene: TimelineRouter.Scene) {
        switch scene {
        case .detail(let charity):
            guard let vc = searchStoryboard.viewController(identifier: SearchStoryboardId.detail) as? CharityDetailViewController else {
                assertionFailure("Unable to instantiate charity details view controller")
                return
            }
            vc.set(charity: charity)
            viewController?.show(vc, sender: nil)
        }
    }
}

