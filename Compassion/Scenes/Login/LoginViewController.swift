//
//  LoginViewController.swift
//  Compassion
//
//  Created by Casper Daris on 02/04/2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
//  This template is meant to work with Swinject.

import UIKit
import FirebaseAuth

//sourcery: AutoMockable
protocol LoginViewControllerProtocol: UIViewControllerRouting {
    func set(interactor: LoginInteractorProtocol)
    func set(router: LoginRouterProtocol)
    
    // add the functions that are called from the presenter
    func displayLogin()
    func displayLoginError(error: String)
    func succesfullUserLogin()
}

class LoginViewController: UIViewController, LoginViewControllerProtocol {
    
    // MARK: - DI
    var interactor: LoginInteractorProtocol?
    var router: LoginRouterProtocol?
    var keyboardObserver: KeyboardObserver?
    
    func set(interactor: LoginInteractorProtocol) {
        self.interactor = interactor
    }
    
    func set(router: LoginRouterProtocol) {
        self.router = router
    }
    
    // MARK: - Outlets
    @IBOutlet weak var emailInput: TextInputField!
    @IBOutlet weak var passwordInput: TextInputField!
    @IBOutlet weak var errorLabel: UILabel!
    @IBOutlet weak var loginButton: BlueButton!
    @IBOutlet weak var routeToRegisterButton: BlueButton!
    @IBOutlet weak var skipLoginButton: BlueButton!
    
    // MARK: - Properties
    
    // MARK: - Lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        interactor?.handleLoginDidLoad()
        navigationItem.backBarButtonItem = UIBarButtonItem(title: "", style: .plain, target: nil, action: nil)
        navigationController?.navigationBar.prefersLargeTitles = true
    }
    
    // MARK: - Actions
    @IBAction func loginButtonPressed(_ sender: Any) {
        interactor?.handleLoginButtonPressed(request: .init(email: emailInput.getContent(),
                                                            password: passwordInput.getContent()))
    }
    
    @IBAction func skipLoginButtonPressed(_ sender: Any) {
        router?.route(to: .main)
    }
    
    @IBAction func registerButtonPressed(_ sender: Any) {
        router?.route(to: .register)
    }
}

// MARK: - Methods
extension LoginViewController {
    
    func displayLogin() {
        self.loginButton.addShadowToView(color: .black, offset: .zero, opacity: 0.3, radius: 2)
        self.routeToRegisterButton.addShadowToView(color: .black, offset: .zero, opacity: 0.3, radius: 2)
        self.skipLoginButton.addShadowToView(color: .black, offset: .zero, opacity: 0.3, radius: 2)
        self.emailInput.configure(type: .email, title: "E-mail", placeholder: "Vul je e-mailadres in", isMandatory: true)
        self.passwordInput.configure(type: .password, title: "Wachtwoord", placeholder: "Vul je wachtwoord in", isMandatory: true)
        setupKeyboardObserver()
    }
    
    func displayLoginError(error: String) {
        self.errorLabel.isHidden = false
        self.errorLabel.text = error
    }
    
    func succesfullUserLogin() {
        router?.route(to: .main)
    }
}

// MARK: - Keyboard Observer
extension LoginViewController: KeyboardObserverProtocol {
    func setupKeyboardObserver() {
        keyboardObserver = .init(view: self.view)
        keyboardObserver?.hideKeyboardOnTap()
    }
}
