//
//  SearchFilterPopUpViewController.swift
//  Compassion
//
//  Created by Casper Daris on 17/04/2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
//  This template is meant to work with Swinject.

import UIKit

protocol SearchFilterPopUpViewControllerProtocol: UIViewControllerRouting {
    func set(interactor: SearchFilterPopUpInteractorProtocol)
    func set(router: SearchFilterPopUpRouterProtocol)
    func set(delegate: SearchViewControllerProtocol)

    func displayFilters(cities: [String], sectors: [String])
}

class SearchFilterPopUpViewController: UIViewController, SearchFilterPopUpViewControllerProtocol {

    // MARK: - DI
    var interactor: SearchFilterPopUpInteractorProtocol?
    var router: SearchFilterPopUpRouterProtocol?
    var searchVCDelegate: SearchViewControllerProtocol?

    func set(interactor: SearchFilterPopUpInteractorProtocol) {
        self.interactor = interactor
    }

    func set(router: SearchFilterPopUpRouterProtocol) {
        self.router = router
    }
    
    func set(delegate: SearchViewControllerProtocol) {
        self.searchVCDelegate = delegate
    }

    // MARK: - Outlets
    @IBOutlet weak var cityPickerView: UIPickerView!
    @IBOutlet weak var sectorPickerView: UIPickerView!
    @IBOutlet weak var searchButton: BlueButton!
    @IBOutlet weak var citySwitch: UISwitch!
    @IBOutlet weak var sectorSwitch: UISwitch!
    
    // MARK: - Properties
    private var cityPickerData = [String]()
    private var sectorPickerData = [String]()
    
    // MARK: - Lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        self.cityPickerView.delegate = self
        self.cityPickerView.dataSource = self
        self.cityPickerView.tag = 1
        self.sectorPickerView.delegate = self
        self.sectorPickerView.dataSource = self
        self.sectorPickerView.tag = 2
        interactor?.handleFilterPopUpViewDidLoad()
    }

    // MARK: - Actions
    @IBAction func searchButtonTapped(_ sender: Any) {
        var returnCity = ""
        var returnSector = ""
        if citySwitch.isOn {
            returnCity = cityPickerData[cityPickerView.selectedRow(inComponent: 0)]
        }
        if sectorSwitch.isOn {
            returnSector = sectorPickerData[sectorPickerView.selectedRow(inComponent: 0)]
        }
        searchVCDelegate?.receiveFilters(city: returnCity, sector: returnSector)
        dismiss(animated: true, completion: nil)
    }
    
    @IBAction func citySwitchTapped(_ sender: Any) {
        if citySwitch.isOn {
            cityPickerView.isHidden = false
        } else {
            cityPickerView.isHidden = true
        }
    }
    
    @IBAction func sectorSwitchTapped(_ sender: Any) {
        if sectorSwitch.isOn {
            sectorPickerView.isHidden = false
        } else {
            sectorPickerView.isHidden = true
        }
    }
}

// MARK: - Methods
extension SearchFilterPopUpViewController {

    func displayFilters(cities: [String], sectors: [String]) {
        self.cityPickerData = cities
        self.sectorPickerData = sectors
    }
}

// MARK: - Picker view extension
extension SearchFilterPopUpViewController: UIPickerViewDelegate, UIPickerViewDataSource {
    
    /// Set the data for the city picker views and set attributes
    func pickerView(_ pickerView: UIPickerView, viewForRow row: Int, forComponent component: Int, reusing view: UIView?) -> UIView {
        let pickerLabel = UILabel()
        
        /// Set the text for each picker view to show
        switch pickerView.tag {
            case 1:
                pickerLabel.text = cityPickerData[row]
            case 2:
                pickerLabel.text = sectorPickerData[row]
            default:
                break
        }
        
        pickerLabel.textColor = UIColor(named: "LabelBlack") ?? .label
        pickerLabel.font = UIFont(name: "Montserrat-Light", size: 14)
        pickerLabel.textAlignment = NSTextAlignment.center
        return pickerLabel
    }
    
    /// Number of columns in all picker views
    func numberOfComponents(in pickerView: UIPickerView) -> Int {
        return 1
    }
    
    /// Number of rows in each picker view
    func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {
        switch pickerView.tag {
            case 1:
                return cityPickerData.count
            case 2:
                return sectorPickerData.count
            default:
                return 0
        }
    }
}
