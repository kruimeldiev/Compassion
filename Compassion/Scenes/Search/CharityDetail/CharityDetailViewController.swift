//
//  CharityDetailViewController.swift
//  Compassion
//
//  Created by Casper Daris on 24/04/2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
//  This template is meant to work with Swinject.

import UIKit

//sourcery: AutoMockable
protocol CharityDetailViewControllerProtocol: UIViewControllerRouting {
    typealias CharityViewModel = CharityDetail.Charity.ViewModel
    typealias FavoriteViewModel = CharityDetail.Favorite.ViewModel
    typealias ReactionViewModel = CharityDetail.Reaction.ViewModel
    
    func set(interactor: CharityDetailInteractorProtocol)
    func set(router: CharityDetailRouterProtocol)
    func set(charity: CharityModel)

    func displayCharityDetail(viewModel: CharityViewModel)
    func displayFavoriteResult(viewModel: FavoriteViewModel)
    func displayReactions(viewModel: ReactionViewModel)
}

class CharityDetailViewController: UIViewController, CharityDetailViewControllerProtocol {

    // MARK: - DI
    var interactor: CharityDetailInteractorProtocol?
    var router: CharityDetailRouterProtocol?
    var tableViewDataSource: ReactionTableViewDataSource = .init()

    func set(interactor: CharityDetailInteractorProtocol) {
        self.interactor = interactor
    }

    func set(router: CharityDetailRouterProtocol) {
        self.router = router
    }
    
    func set(charity: CharityModel) {
        self.displayedCharity = charity
    }
    
    // MARK: - Outlets
    @IBOutlet weak var scrollView: UIScrollView!
    @IBOutlet weak var charityNameLabel: UILabel!
    @IBOutlet weak var charityImageView: UIImageView!
    @IBOutlet weak var charityDescriptionLabel: UILabel!
    @IBOutlet weak var sectorViewOne: SectorView!
    @IBOutlet weak var sectorViewTwo: SectorView!
    @IBOutlet weak var sectorViewThree: SectorView!
    @IBOutlet weak var emailLabel: UILabel!
    @IBOutlet weak var websiteLabel: UILabel!
    @IBOutlet weak var phoneLabel: UILabel!
    @IBOutlet weak var adresLabel: UILabel!
    @IBOutlet weak var addReactionButton: BlueButton!
    @IBOutlet weak var reactionTableView: UITableView!
    @IBOutlet weak var reactionTableViewHeight: NSLayoutConstraint!
    
    // MARK: - Properties
    var displayedCharity: CharityModel?
    var charityIsFavorite: Bool = false

    // MARK: - Lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        interactor?.handleCharityDetailDidLoad(request: .init(name: displayedCharity?.name ?? "",
                                                              logoUrl: displayedCharity?.logoUrl ?? ""))
        disableReactionButton()
        setupFavoriteButton()
        reactionTableView.delegate = self
        reactionTableView.dataSource = tableViewDataSource
    }
    
    override func viewWillAppear(_ animated: Bool) {
        setupTableViewHeight()
    }
    
    /// Remove the observer to save memory?
    override func viewWillDisappear(_ animated: Bool) {
        reactionTableView.removeObserver(self, forKeyPath: "contentSize")
    }
    
    // MARK: - Setup
    /// This observer makes sure the UITableView is using the right height contraint
    func setupTableViewHeight() {
        reactionTableView.addObserver(self, forKeyPath: "contentSize", options: .new, context: nil)
    }
    
    override func observeValue(forKeyPath keyPath: String?, of object: Any?, change: [NSKeyValueChangeKey : Any]?, context: UnsafeMutableRawPointer?) {
        if keyPath == "contentSize" {
            if object is UITableView {
                if let newValue = change?[.newKey] {
                    let newSize = newValue as! CGSize
                    self.reactionTableViewHeight.constant = newSize.height
                }
            }
        }
    }
    
    /// Top right button to favorite a charity (initial state)
    func setupFavoriteButton() {
        navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(systemName: "heart"),
                                                            style: .plain,
                                                            target: self,
                                                            action: #selector(favoriteTapped))
        navigationItem.rightBarButtonItem?.isEnabled = false
        navigationItem.rightBarButtonItem?.tintColor = UIColor(named: "DisabledButtonBlue")
    }
    
    // MARK: - Actions
    /// Function to handle the favorite button tapped
    @objc func favoriteTapped() {
        /// First disable the button so that the user can't multitap
        navigationItem.rightBarButtonItem?.isEnabled = false
        /// Grab the charity name
        guard let charity = displayedCharity else {
            print("There is no charity to favorite.")
            return
        }
        interactor?.handleFavoriteButtonTapped(request: .init(charity: charity,
                                                              initialState: charityIsFavorite))
    }
    
    @IBAction func addReactionButtonTapped(_ sender: Any) {
        router?.route(to: .newReaction(charity: displayedCharity?.name ?? ""))
    }
}

// MARK: - Methods
extension CharityDetailViewController {

    /// Fill in the scene with all the fetched charity info
    func displayCharityDetail(viewModel: CharityViewModel) {
        self.charityNameLabel.text = displayedCharity?.name
        setupSectorViews()
        self.charityDescriptionLabel.text = displayedCharity?.description
        self.emailLabel.text = "\(displayedCharity?.email ?? "")"
        self.websiteLabel.text = "\(displayedCharity?.website ?? "")"
        self.phoneLabel.text = "\(displayedCharity?.phone ?? "")"
        self.adresLabel.text = "\(setupAdress())"
        self.charityImageView.image = viewModel.logo
        self.charityImageView.addShadowToView(color: .black, offset: .zero, opacity: 0.3, radius: 2)
        self.addReactionButton.addShadowToView(color: .black, offset: .zero, opacity: 0.3, radius: 2)
    }
    
    /// If the user is logged in, able the favorite button and set the state
    func displayFavoriteResult(viewModel: FavoriteViewModel) {
        if viewModel.isNowFavorite {
            charityIsFavorite = true
            enableFavoriteButton(isFavorite: true)
        } else {
            charityIsFavorite = false
            enableFavoriteButton(isFavorite: false)
        }
        /// If the user is logged in, the reaction button may be enabled as well
        enableReactionButton()
    }
    
    /// Show the reactions for this charity
    func displayReactions(viewModel: ReactionViewModel) {
        tableViewDataSource.reactionArray = viewModel.reactions
        self.reactionTableView.reloadData()
    }
    
    func enableFavoriteButton(isFavorite: Bool) {
        navigationItem.rightBarButtonItem?.isEnabled = true
        navigationItem.rightBarButtonItem?.tintColor = UIColor(named: "ButtonBlue")
        if isFavorite {
            navigationItem.rightBarButtonItem?.image = UIImage(systemName: "heart.fill")
        } else {
            navigationItem.rightBarButtonItem?.image = UIImage(systemName: "heart")
        }
    }
    
    func setupSectorViews() {
        switch displayedCharity?.sector.count {
            case 0:
                break
            case 1:
                self.sectorViewOne.isHidden = false
                self.sectorViewOne.configure(sector: displayedCharity?.sector[0] ?? "")
            case 2:
                self.sectorViewOne.isHidden = false
                self.sectorViewOne.configure(sector: displayedCharity?.sector[0] ?? "")
                self.sectorViewTwo.isHidden = false
                self.sectorViewTwo.configure(sector: displayedCharity?.sector[1] ?? "")
            default:
                self.sectorViewOne.isHidden = false
                self.sectorViewOne.configure(sector: displayedCharity?.sector[0] ?? "")
                self.sectorViewTwo.isHidden = false
                self.sectorViewTwo.configure(sector: displayedCharity?.sector[1] ?? "")
                self.sectorViewThree.isHidden = false
                self.sectorViewThree.configure(sector: displayedCharity?.sector[2] ?? "")
        }
    }
    
    func setupAdress() -> String {
        return "\(displayedCharity?.adres.streetName ?? "") \(displayedCharity?.adres.streetNumber ?? ""), \(displayedCharity?.adres.city ?? "")"
    }
    
    func disableReactionButton() {
        addReactionButton.isEnabled = false
        addReactionButton.backgroundColor = UIColor(named: "DisabledButtonBlue") ?? .gray
    }
    
    func enableReactionButton() {
        addReactionButton.isEnabled = true
        addReactionButton.backgroundColor = UIColor(named: "ButtonBlue") ?? .systemBlue
    }
}

// MARK: - Tableview and Scrollview setup
extension CharityDetailViewController: UITableViewDelegate, UIScrollViewDelegate {
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return UITableView.automaticDimension
    }
    
    func tableView(_ tableView: UITableView, estimatedHeightForRowAt indexPath: IndexPath) -> CGFloat {
        return UITableView.automaticDimension
    }
}
