//
//  NewReactionViewController.swift
//  Compassion
//
//  Created by Casper Daris on 09/05/2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
//  This template is meant to work with Swinject.

import UIKit

//sourcery: AutoMockable
protocol NewReactionViewControllerProtocol: UIViewControllerRouting {
    typealias ViewModel = NewReaction.NewReaction.ViewModel
    
    func set(interactor: NewReactionInteractorProtocol)
    func set(router: NewReactionRouterProtocol)
    func set(charity: String)

    func displayNewReaction(user: String)
    func newReactionPlaced(viewModel: ViewModel)
}

class NewReactionViewController: UIViewController, NewReactionViewControllerProtocol {

    // MARK: - DI
    private var interactor: NewReactionInteractorProtocol?
    private var router: NewReactionRouterProtocol?
    private var charityForReaction: String?

    func set(interactor: NewReactionInteractorProtocol) {
        self.interactor = interactor
    }

    func set(router: NewReactionRouterProtocol) {
        self.router = router
    }
    
    func set(charity: String) {
        self.charityForReaction = charity
    }
    
    // MARK: - Outlets
    @IBOutlet weak var placeReactionButton: BlueButton!
    @IBOutlet weak var cancelButton: BlueButton!
    @IBOutlet weak var newReactionLabel: UILabel!
    @IBOutlet weak var nameLabel: UILabel!
    @IBOutlet weak var textView: UITextView!
    @IBOutlet weak var newReactionView: UIView!
    
    // MARK: - Properties

    // MARK: - Lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        interactor?.handleNewReactionDidLoad()
    }

    // MARK: - Actions
    @IBAction func placeButtonTapped(_ sender: Any) {
        let input = textView.text ?? ""
        /// If the user input is legit and there is an charity to react to, try and call the interactor
        if (input.count >= 6 && input.count <= 256) && (charityForReaction != nil) {
            interactor?.placeNewReaction(request: .init(reaction: input,
                                                        charity: charityForReaction!))
        }
    }
    
    @IBAction func cancelButtonTapped(_ sender: Any) {
        self.dismiss(animated: true, completion: nil)
    }
}

// MARK: - Methods
extension NewReactionViewController {

    func displayNewReaction(user: String) {
        newReactionView.layer.cornerRadius = 12
        newReactionView.addShadowToView(color: .black, offset: .zero, opacity: 0.3, radius: 4)
        textView.layer.cornerRadius = 6
        textView.addShadowToView(color: .black, offset: .zero, opacity: 0.3, radius: 2)
        cancelButton.addShadowToView(color: .black, offset: .zero, opacity: 0.3, radius: 2)
        placeReactionButton.addShadowToView(color: .black, offset: .zero, opacity: 0.3, radius: 2)
        newReactionLabel.text = "Reactie voor \(charityForReaction ?? "")"
        nameLabel.text = user
    }
    
    func newReactionPlaced(viewModel: ViewModel) {
        self.dismiss(animated: true, completion: nil)
    }
}
