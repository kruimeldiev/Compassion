////
//  SettingsRouter.swift
//  Compassion
//
//  Created by Casper Daris on 10/04/2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
//  This template is meant to work with Swinject.

import UIKit

protocol SettingsRouterProtocol {
    func set(viewController: SettingsViewControllerProtocol?)
    func route(to scene: SettingsRouter.Scene)
}

class SettingsRouter: NSObject, SettingsRouterProtocol {
    
    //MARK: - DI
    weak var viewController: SettingsViewControllerProtocol?
    private let rootNavigator: RootNavigatorProtocol
    private let settingsStoryboard: Storyboard
    
    func set(viewController: SettingsViewControllerProtocol?) {
        self.viewController = viewController
    }
    
    init(rootNavigator: RootNavigatorProtocol,
         settings: Storyboard) {
        self.rootNavigator = rootNavigator
        self.settingsStoryboard = settings
    }
}

// MARK: - Routing logic
extension SettingsRouter {
    
    enum Scene {
        case accountSettings
        case locationSettings
        case terms
        case privacy
        case aboutTheApp
        case login
    }
    
    func route(to scene: SettingsRouter.Scene) {
        switch scene {
            case .accountSettings:
                print("Account")
            case .locationSettings:
                guard let vc = settingsStoryboard.viewController(identifier: SettingsStoryboardId.location) else {
                    assertionFailure("Unable to instantiate location settings view controller")
                    return
                }
                viewController?.show(vc, sender: nil)
            case .terms:
                guard let vc = settingsStoryboard.viewController(identifier: SettingsStoryboardId.terms) else {
                    assertionFailure("Unable to instantiate terms view controller")
                    return
                }
                viewController?.show(vc, sender: nil)
            case .privacy:
                guard let vc = settingsStoryboard.viewController(identifier: SettingsStoryboardId.privacy) else {
                    assertionFailure("Unable to instantiate privacy view controller")
                    return
                }
                viewController?.show(vc, sender: nil)
            case .aboutTheApp:
                guard let vc = settingsStoryboard.viewController(identifier: SettingsStoryboardId.about) else {
                    assertionFailure("Unable to instantiate about view controller")
                    return
                }
                viewController?.show(vc, sender: nil)
            case .login:
                rootNavigator.logout()
        }
    }
}

